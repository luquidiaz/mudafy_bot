{"code":"import \"dotenv/config\";\nimport { createBot, createProvider, createFlow, addKeyword, EVENTS } from '@builderbot/bot';\nimport { MemoryDB } from '@builderbot/bot';\nimport { BaileysProvider } from '@builderbot/provider-baileys';\nimport { toAsk, httpInject } from \"@builderbot-plugins/openai-assistants\";\nimport { typing } from \"./utils/presence\";\nconst PORT = process.env.PORT ?? 3008;\nconst ASSISTANT_ID = process.env.ASSISTANT_ID ?? '';\nconst userQueues = new Map();\nconst userLocks = new Map();\nconst processUserMessage = async (ctx, { flowDynamic, state, provider }) => {\n    await typing(ctx, provider);\n    const response = await toAsk(ASSISTANT_ID, ctx.body, state);\n    const chunks = response.split(/\\n\\n+/);\n    for (const chunk of chunks) {\n        const cleanedChunk = chunk.trim().replace(/【.*?】[ ] /g, \"\");\n        await flowDynamic([{ body: cleanedChunk }]);\n    }\n};\nconst handleQueue = async (userId) => {\n    const queue = userQueues.get(userId);\n    if (userLocks.get(userId)) {\n        return;\n    }\n    while (queue.length > 0) {\n        userLocks.set(userId, true);\n        const { ctx, flowDynamic, state, provider } = queue.shift();\n        try {\n            await processUserMessage(ctx, { flowDynamic, state, provider });\n        }\n        catch (error) {\n            console.error(`Error processing message for user ${userId}:`, error);\n        }\n        finally {\n            userLocks.set(userId, false);\n        }\n    }\n    userLocks.delete(userId);\n    userQueues.delete(userId);\n};\nconst welcomeFlow = addKeyword(EVENTS.WELCOME)\n    .addAction(async (ctx, { flowDynamic, state, provider }) => {\n    const userId = ctx.from;\n    if (!userQueues.has(userId)) {\n        userQueues.set(userId, []);\n    }\n    const queue = userQueues.get(userId);\n    queue.push({ ctx, flowDynamic, state, provider });\n    if (!userLocks.get(userId) && queue.length === 1) {\n        await handleQueue(userId);\n    }\n});\nconst main = async () => {\n    const adapterFlow = createFlow([welcomeFlow]);\n    const adapterProvider = createProvider(BaileysProvider, {\n        groupsIgnore: true,\n        readStatus: false,\n        usePairingCode: false,\n        phoneNumber: null\n    });\n    const adapterDB = new MemoryDB();\n    const { httpServer } = await createBot({\n        flow: adapterFlow,\n        provider: adapterProvider,\n        database: adapterDB,\n    });\n    httpInject(adapterProvider.server);\n    httpServer(+PORT);\n};\nmain();\n","references":["/Users/lucasdiaz/LD-Coding/mudafy_bot/node_modules/dotenv/config.d.ts","/Users/lucasdiaz/LD-Coding/mudafy_bot/node_modules/@builderbot/bot/dist/index.d.ts","/Users/lucasdiaz/LD-Coding/mudafy_bot/node_modules/@builderbot/bot/dist/index.d.ts","/Users/lucasdiaz/LD-Coding/mudafy_bot/node_modules/@builderbot/provider-baileys/dist/index.d.ts","/Users/lucasdiaz/LD-Coding/mudafy_bot/node_modules/@builderbot-plugins/openai-assistants/dist/index.d.ts","/Users/lucasdiaz/LD-Coding/mudafy_bot/src/utils/presence.ts"]}
